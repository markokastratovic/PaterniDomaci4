/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.form;

import controller.Controller;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.MathOperator;
import ui.components.validator.NumberValidator;
import ui.components.validator.OperatorValidator;

/**
 *
 * @author student1
 */
public class FormAddMath extends javax.swing.JDialog {

    /**
     * Creates new form FormAddMath
     */
    public FormAddMath(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        prepareView();
        prepareValidator();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputA = new ui.components.PanelTextfieldComponent();
        inputB = new ui.components.PanelTextfieldComponent();
        inputOperator = new ui.components.PanelTextfieldComponent();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("add");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inputA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(inputB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(inputOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSave)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(inputA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
//        // TODO add your handling code here:
//        try {
//            Object inputa = inputA.getValue();
//            int a = Integer.parseInt(inputa.toString());
//            Object inputb = inputB.getValue();
//            int b = Integer.parseInt(inputb.toString());
//            Object operator = inputOperator.getValue();
//            MathOperator mathOperator = MathOperator.valueOf(operator.toString());
//            
//            model.Math math = new model.Math(a, b, 0.0, mathOperator);
//            Controller.getInstance().add(math);
//        } catch (Exception ex) {
//            System.out.println(ex.getMessage());
//        }
        boolean successfullValidation = true;
        int a=0, b=0;
        MathOperator mathOperator=MathOperator.ADD;
        try {
            Object inputa = inputA.getValue();
            a = Integer.parseInt(inputa.toString());
        } catch (Exception e) {
            successfullValidation = false;
            System.out.println(e.getMessage());
        }

        try {
            Object inputb = inputB.getValue();
            b = Integer.parseInt(inputb.toString());
        } catch (Exception e) {
            successfullValidation = false;
            System.out.println(e.getMessage());
        }

        try {
            Object operator = inputOperator.getValue();
            mathOperator = MathOperator.valueOf(operator.toString());
        } catch (Exception e) {
            successfullValidation = false;
            System.out.println(e.getMessage());
        }
        if(successfullValidation){
        model.Math math = new model.Math(a, b, 0.0, mathOperator);
        Controller.getInstance().add(math);
        }else{
          System.out.println("Greska u validacji");
        }

    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private ui.components.PanelTextfieldComponent inputA;
    private ui.components.PanelTextfieldComponent inputB;
    private ui.components.PanelTextfieldComponent inputOperator;
    // End of variables declaration//GEN-END:variables

    private void prepareView() {
        inputA.getlInput().setText("A:");
        inputA.getlError().setText("Please enter A");
        inputA.getTxtInput().setText("");
        inputB.getlInput().setText("B:");
        inputB.getlError().setText("Please enter B");
        inputOperator.getlInput().setText("Operator:");
        inputOperator.getlError().setText("Please enter Operator");
    }

    private void prepareValidator() {
        inputA.setValidator(new NumberValidator());
        inputB.setValidator(new NumberValidator());
        inputOperator.setValidator(new OperatorValidator());
    }
}
